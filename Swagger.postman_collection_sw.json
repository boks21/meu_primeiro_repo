{
	"info": {
		"_postman_id": "35e799e5-186c-47b1-8763-ec6017cf7762",
		"name": "Swagger Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "include_exclude",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f76f4b2a-728b-4c3d-b50d-cec3d56c0473",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"//Saving the response \"name\" value into an environment variable",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Contains object: 'result'\", function () {",
							"    var contains = false;",
							"    for (var key in jsonData) {",
							"       if (key == \"result\") {",
							"           contains = true;",
							"       }",
							"    }",
							"    pm.expect(contains).to.be.true;",
							"});",
							"",
							"pm.test(\"Test modelType.modelTypeQual\", function () {",
							"",
							"  pm.expect(jsonData.result[0].modelType.modelTypeQual).not.equal(null);",
							"  pm.expect(jsonData.result[0].modelType.modelTypeQual).not.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Test modelType.devModelQual\", function () {",
							"  pm.expect(jsonData.result[0].modelType.devModelQual).not.equal(null);",
							"  pm.expect(jsonData.result[0].modelType.devModelQual).not.equal(\"\");  ",
							"",
							"});",
							"",
							"",
							"pm.test(\"Contains object: 'rule'\", function () {",
							"    var contains = false;",
							"    for (var key in jsonData.result[0]) {",
							"       if (key == 'rule') {",
							"           contains = true;",
							"       }",
							"    }",
							"    pm.expect(contains).to.be.true;",
							"});",
							"",
							"pm.test(\"onlyWith or NotWith\", function () {",
							"    var contains = false;",
							"    var notWith = 'A';",
							"    var onlyWith = 'Z';",
							"    pm.expect(jsonData.result[0].rule.inclExclStatement).to.be.oneOf([notWith,onlyWith]);",
							"",
							"});",
							"",
							"pm.test(\"activeFeatureList is not null\", function () {",
							"    var nullArray = true;",
							"    ",
							"    if(jsonData.result[0].rule.activeFeatureList!==null){",
							"        nullArray=false;",
							"    }",
							"   pm.expect(nullArray).to.be.false;",
							"",
							"});",
							"",
							"pm.test(\"activeFeatureList is not Empty\", function () {",
							"    var notEmpty = false;",
							"    ",
							"    if(jsonData.result[0].rule.activeFeatureList.length>0){",
							"        notEmpty=true;",
							"    }",
							"   pm.expect(notEmpty).to.be.true;",
							"",
							"});",
							"",
							"pm.test(\"All activeFeatureList elements have feature codes\", function () {",
							"",
							"    var activeFeatureList = jsonData.result[0].rule.activeFeatureList;",
							"    ",
							"    for(var i=0;i<activeFeatureList.length;++i){",
							"       pm.expect(activeFeatureList[i].feature.option.featureCode).not.equal(null);",
							"    }",
							"    ",
							"});",
							"",
							"pm.test(\"ConditionFeatureList is not null\", function () {",
							"    var nullArray = true;",
							"    ",
							"    if(jsonData.result[0].rule.conditionFeatureList!==null){",
							"        nullArray=false;",
							"    }",
							"   pm.expect(nullArray).to.be.false;",
							"",
							"});",
							"",
							"pm.test(\"If conditionFeatureList is not Empty, test featureCodes\", function () {",
							"    ",
							"     var conditionFeatureList = jsonData.result[0].rule.activeFeatureList;",
							"    ",
							"    if(jsonData.result[0].rule.conditionFeatureList.length>0){",
							"",
							"        for(var i=0;i<conditionFeatureList.length;++i){",
							"            pm.expect(conditionFeatureList[i].feature.option.featureCode).not.equal(null);",
							"        }",
							"  ",
							"    }",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "10a8c2eb-634e-4800-9e8e-a39fc153bb18",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"eopDate\": {\r\n\t\"greaterOrEqual\": \"2019-09-27\"\r\n  },\r\n  \"sopDate\": {\r\n\t\"lowerOrEqual\": \"2019-09-27\"\r\n  },\r\n  \"modelTypeQualifiers\": [\r\n    \"JC31\"\r\n  ],\r\n  \"featureCodes\": [\r\n    \"S2TBA\"\r\n  ]\r\n}"
				},
				"url": {
					"raw": "https://oka-business-pskd-sprint-test.mp-dev-cnap.bmwgroup.net/query-rule/rule-uses-ag/incl-excl/v1:search",
					"protocol": "https",
					"host": [
						"oka-business-pskd-sprint-test",
						"mp-dev-cnap",
						"bmwgroup",
						"net"
					],
					"path": [
						"query-rule",
						"rule-uses-ag",
						"incl-excl",
						"v1:search"
					]
				},
				"description": "inc_exc"
			},
			"response": []
		}
	]
}